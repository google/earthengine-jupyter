[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "earthengine-jupyter",
    "section": "",
    "text": "NOTICE: This is an experimental project and is not an officially supported Google project. You are welcome to use it, but we do not guarantee stability."
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "earthengine-jupyter",
    "section": "Setup",
    "text": "Setup\n\ntry:\n  import ee_jupyter\n  print('ee_jupyter was already installed.')\nexcept ModuleNotFoundError:\n  print('ee_jupyter was not found. Installing now...')\n  import os\n  result = os.system('pip -q install earthengine-jupyter')\n\nee_jupyter was already installed."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "earthengine-jupyter",
    "section": "How to use",
    "text": "How to use\nThis lib contains a Map class that can be used to display an interactive map.\n\nimport ee\nfrom ee_jupyter.core import authenticate_if_needed\nfrom ee_jupyter.ipyleaflet import Map\nfrom ee_jupyter.layout import MapWithInspector\nimport ipywidgets as widgets\n\n\nauthenticate_if_needed()\n\n✓ Authentication credentials were found.\n\n\n\n# Intialize the Earth Engine client library.\nee.Initialize()\n\n\nmap1 = Map(center=(37.5924, -122.09), zoom=8)\nmap1\n\n\n\n\nDefine an Earth Engine image layer, and add it to the interactive map.\n\nimg1 = ee.Image(\"LANDSAT/LC09/C02/T1_L2/LC09_044034_20220127\")\nvisualization = {\n    'bands': ['SR_B4', 'SR_B3', 'SR_B2'],\n    'min': 0.2 / 0.0000275,\n    'max': 0.4 / 0.0000275,\n}\nmap1.addLayer(eeObject=img1, visParams=visualization, name='Landsat scene')\n\nWe can also create an inspector object and associate it with the previously created map.\n\nfrom ee_jupyter.ipyleaflet import Inspector\n\ninspector1 = Inspector(map_object=map1)\ninspector1\n\n\n\n\nTypically when you create a inspector object, you will want to display it with the map. The MapWithInpsector object adds a button that toggles the inspector functionality.\nThe map below shows a Sentinel-2 image covering Paris. Click on the inspector toggle button to open the inspector.\n\nmap_init_paris = {'center':(49.4, 2.3), 'zoom':8}\nm = MapWithInspector(**map_init_paris)\nimage = ee.Image('COPERNICUS/S2_SR_HARMONIZED/20220604T104619_20220604T104620_T31UDQ')\nm.map.addLayer(image, {'bands': ['B4', 'B3', 'B2'], 'max': 2500}, 'Landsat image')\nm\n\n\n\n\n\n\n\n\n\n\nTip With Caption\n\n\n\nNote that when viewed on GitHub Pages you can manipulate Jupyter widgets independently, but the widgets do not interact with each other. To experience the cross-widget interactivity, open up this notebook in a Jupyter environment."
  },
  {
    "objectID": "colab.html",
    "href": "colab.html",
    "title": "Colab module",
    "section": "",
    "text": "source\n\nset_colab_output_cell_height\n\n set_colab_output_cell_height (max_height)\n\nSets the maximum height for the current notebook cell’s output.\n\nset_output_cell_height(max_height=200)"
  },
  {
    "objectID": "ipyleaflet.html",
    "href": "ipyleaflet.html",
    "title": "ipyleaflet module",
    "section": "",
    "text": "source\n\n\n\n Map (*args, **kwargs)\n\nAn interactive map class for Jupyter clients.\nAttributes: layers_control: a boolean indicating whether to display a layers control.\n\nsource\n\n\n\n\n TileLayerEE (ee_object:ee.image.Image, *args, **kwargs)\n\nClass for a tile layer generated by Earth Engine.\nAttributes: ee_object: An Earth Engine object.\n\n\n\n\nType\nDetails\n\n\n\n\nee_object\nImage\nAn Earth Engine Image object\n\n\nargs\n\n\n\n\nkwargs\n\n\n\n\n\nDisplay the default interactive map.\n\nmap = Map()\nmap\n\nDisplay an Earth Engine raster layer.\n\nee.Initialize()\n\n\ndem = ee.Image('USGS/SRTMGL1_003')\nsample_image = dem.updateMask(dem.gt(0))\n\nmap2 = Map()\nmap2.addLayer(sample_image, {'min':0, 'max':4000}, name=\"My layer\", shown=True)\nmap2"
  },
  {
    "objectID": "ipyleaflet.html#map-inspector",
    "href": "ipyleaflet.html#map-inspector",
    "title": "ipyleaflet module",
    "section": "Map Inspector",
    "text": "Map Inspector\nThe following defines a StructureTree class, which builds a tree structure corresponding to data structure provided as input. The tree branches are lazily populated as the tree is expanded, so that large data structures can be efficiently rendered.\n\nsource\n\nStructureTree\n\n StructureTree (data, **kwargs)\n\nThe base Tree widget\nHere is a StructureTree object that demonstrates how lists, dictionaries, and nested objects are rendered:\n\nst = StructureTree({'none': None,\n               'number': 1,\n               'string': 'hello!',\n               'list': [1, 'item1'], \n               'dictionary': {'a key': 'a value'},\n               'nesting': [\n                   ['nested', 'list'],\n                   {'a nested': 'dictionary'}\n               ]})\nst\n\nThe following defines an Inspector class, which is used to display information obtained from querying a Map object.\n\nsource\n\n\nInspector\n\n Inspector (map_object=None, *args, **kwargs)\n\nClass representing an inspector tool that responds to map events.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmap_object\nNoneType\nNone\nAn Earth Engine Image object\n\n\nargs\n\n\n\n\n\nkwargs\n\n\n\n\n\n\n\n# Testing it out...\nmap1 = Map()\nmap1.addLayer(ee.Image.pixelLonLat(), {'min':-90, 'max':90, 'opacity':0.5}, 'pixelLatLon')\n# map1.addLayer(ee.Image(\"CGIAR/SRTM90_V4\"), {'opacity':0.5}, 'SRTM')\ninspector1 = Inspector(map_object = map1)\n\nzoom_slider = widgets.IntSlider(description='Zoom level:', min=0, max=15, value=7)\nwidget_control1 = ipyleaflet.WidgetControl(widget=inspector1,\n                                           position='bottomright',\n                                           layout=widgets.Layout(overflow='scroll'))\nmap1.add_control(widget_control1)\nmap1"
  },
  {
    "objectID": "ipyleaflet.html#examples",
    "href": "ipyleaflet.html#examples",
    "title": "ipyleaflet module",
    "section": "Examples",
    "text": "Examples\n\nInspector object only\n\ninspector1 = Inspector()\ninspector1\n\n\n\nInspector with a Map\n\nee.Initialize()\n\n\nmap = Map()\ninspector2 = Inspector(map_object=map)\ndisplay(\n    widgets.HBox([\n        map,\n        inspector2\n    ],\n    layout=widgets.Layout(border='1px solid black')))\n\nmap.addLayer(ee.Image.pixelLonLat(), {'min':-90, 'max':90, 'opacity':0.5}, 'LonLat')\nmap.addLayer(\n    ee.Image('LANDSAT/LC09/C02/T1_L2/LC09_187058_20220105'),\n    {'min':0, 'max':90, 'opacity':0.5},\n    'Landsat')"
  },
  {
    "objectID": "layout.html",
    "href": "layout.html",
    "title": "layout module",
    "section": "",
    "text": "logger = logging.getLogger()\nlogger.setLevel(logging.WARNING)"
  },
  {
    "objectID": "layout.html#inspector-layouts",
    "href": "layout.html#inspector-layouts",
    "title": "layout module",
    "section": "Inspector layouts",
    "text": "Inspector layouts\n\nMap with Inspector\n\nsource\n\n\nMapWithInspector\n\n MapWithInspector (**kwargs)\n\nA map with a tobbleable inspector.\n\nee.Initialize()\n\nmt = MapWithInspector(center=(37.5924, -122.09), zoom=8)\nmt.map.addLayer(ee.Image.pixelLonLat(), {'min':-90, 'max':90, 'opacity':0.5}, 'LonLat')\nmt.map.addLayer(\n    ee.Image('LANDSAT/LC09/C02/T1_L2/LC09_187058_20220105'),\n    {'min':0, 'max':90, 'opacity':0.5},\n    'Landsat')\nmt"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core module",
    "section": "",
    "text": "source\n\n\n\n authenticate_if_needed ()\n\nAuthenticate Earth Engine, if credentials do not exist.\n\nAuthenticate, if needed.\n\n\nauthenticate_if_needed()\n\n✓ Authentication credentials were found."
  }
]